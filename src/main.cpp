/*
 Main low-level code for controller:
 * manage buses and read sensors
 * run control algorithm generated by Simulink (placed in libs/)
 * drive outputs
 */

/*
 * TODO list:
 * Implement receiver decoding with proper library, channel_raw struct already created, todo is create rx object, initialize serial, do read, create funs etc...
 * Add new two float inputs to ctrl input, corrisponding to ch0 and ch1 (converted to proper values)
 * Implement button routine for MTP activation
 * Write function do_MTP (after having set power callbck, before enabling relay)
 * 
 * 
 */

#ifndef __MAIN_CPP__
#define __MAIN_CPP__ //main define

//include
#include <include.h>

void setup() {
	//set the pins
	set_GPIO();

	//led on
	LEDON;

	//set CPU freq
	set_arm_clock(CPU_FREQ);

	//set RTC provider
	setSyncProvider(getTime);

	//set callback when swiching off
	delay(200);
	set_arm_power_button_callback(&turnoff_callback);

    //check mtp - after set_arm_power_button_callback, before enabling other relay etc
    if (check_mtp()) do_mtp(); //if true 

	//begin IO buses
	start_IObus();

	//set input-output (sensors etc)
	set_IObus();

	//enable relay
	RELAY_ENABLE;

	//check battery voltage
	check_voltage();

	//do zero of sensors
	do_zeros();

	//debug if necessary (otherwise do nothing)
	start_debug();

	//start_logger if necessary (otherwise do nothing)
	start_logger();

	//enable steer motor
	MTR_ENABLE;

	//main delay before starting
	delay(200);

	//led off
	LEDOFF;

	//begin control loop - to be called just before starting loop
	ctrl.begin();
	sampling_timer = micros() - SAMPLING_TIME; //to be sure that the control loop starts immediately at the first loop
}

void loop() {
	if ((micros() - sampling_timer) >= SAMPLING_TIME) {
		timing.dt_cycle = micros() - sampling_timer; //cycle time (should be equal to SAMPLING_TIME)
		sampling_timer = micros(); //update timer
		
		//get sensor readings
		get_sensors();

		//do control loop
		do_control();

		//do debug stuff if necessary (otherwise do nothing)
		do_debug();

		//check if errors 
		check_error();

		//set drivers
		set_driver();

		//update duty cycle
		timing.duty_cycle = micros() - sampling_timer; //duty cycle (i.e. time to do stuff), should be < SAMPLING_TIME, better < SAMPLING_TIME/2 to avoid large delay

		//other secondary stuff below

		//do logging stuff if necessary (otherwise do nothing)
		do_logger();
		
		//do led stuff
		do_led();

	}

}

#endif
